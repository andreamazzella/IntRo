---
title: "6: Cleaning data"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
---

------------------------------------------------------------------------

# What you will learn

-   Data cleaning
    -   What is dirty data?
    -   Rename variables
    -   Delete variables
    -   Data classes
        -   Label categorical values
-   Identify errors and change values
-   Relevel categories

------------------------------------------------------------------------

# Recap from topic 5

Using dataset `trial`, create a new categorical variable that indicates if that patient's `marker` was <0.5, between 0.5 and 1, or ‚â•1 ng/mL.

```{r ex0}
trial <- gtsummary::trial

# Your code here üëá

```


------------------------------------------------------------------------

```{r}
library(janitor)
library(tidyverse)
```

------------------------------------------------------------------------

# Dirty data

Your colleague Ian, an eager medical doctor, heard that you can use R and asked you to do a 'quick analysis' of his data.

He conducted a retrospective study, *S-Fall*, among older patients admitted to a mental health hospital, to look at the impact of sedation on the incidence of falls and injuries, as well as subsequent analgesia prescriptions.

Ian thought it was a good idea for the data collection to be done in Excel, and unfortunately, there's no data dictionary to be found.

Let's import this dataset, aptly named `S-Fall for analysis new final FINAL.xlsx`.

```{r}
falls <- readxl::read_excel("data/S-Fall for analysis new final FINAL.xlsx")

falls
```

*Exercise 1.*

1.  Can you spot at least 5 issues with this dataset?
2.  Open the spreadsheet in Excel. What do you notice?
3.  Try to calculate the mean age using `mean()`.
4.  Use `summary()` to summarise this dataset. What happens?




------------------------------------------------------------------------

# Data cleaning

In its current state, the dataset is unusable. We'll now work on "cleaning" this new dataset, to make it more useful.

Some changes can already be done during data import - for example, we can tell R to skip the first rows that don't actually contain the column names.

```{r}
falls_v2 <- readxl::read_excel("data/S-Fall for analysis new final FINAL.xlsx", skip = 3)

head(falls_v2)
```

------------------------------------------------------------------------

## Rename variables

Some variables have unclear, long or upper-case names.

*Exercise 2.* Use a function to count how many patients were previously admitted to a Mental Health hospital. What do you notice?




Let's rename them so they're easier to understand, or to type.

A helpful function to give a first scrub to all variable names at once is `clean_names()` from package `janitor`.

*Exercise 3.* What differences do you notice?
```{r}
falls_renamed <- clean_names(falls_v2)

data.frame(old_vrb_names = names(falls_v2),
           new_vrb_names = names(falls_renamed))
```




Now we can make custom changes to variable names. We can use `rename()` from `dplyr`. Note that the pattern is `newname = oldname`

```{r}
falls_renamed_2 <- falls_renamed |>
  rename(id = participant_study_number,
         prev_admission = was_this_patient_admitted_to_a_mental_health_hospital_previously,
         prev_cbt = cognitive_behavioural_therapy,
         date_admit = admission_date,
         date_start_sedation = date_1st_dose_sedation,
         hosp_cbt = cognitive_behavioural_therapy_2,
         fall = fall_48_hours_since_admission,
         date_fall = date_of_fall_if_leading_to_injury,
         fall_type = type,
         analgesia = analgesia_prescribed_for_that_injury,
  )

head(falls_renamed_2)
```

*Exercise 4.*

Rename variable `duration_of_analgesia` to a name of your choice.




------------------------------------------------------------------------

## Deleting variables

It looks like some variables don't contain any data - they didn't even have a name:

```{r}
falls_renamed_2 |> select(starts_with("x"))
```

Let's remove these empty variables from the dataset - as we did in topic 4.

```{r}
falls_trimmed <- falls_renamed_2 |> select(!starts_with("x"))
```

------------------------------------------------------------------------

## Deleting rows

It looks like:

1.  some rows do not actually contain any data,
2.  five rows at the end contain a separate table.

```{r}
tail(falls_trimmed, n = 12)
```

We need to remove all these rows. Before reading the chunk below, can you remember what function we can use to conditionally keep rows?

```{r}
falls_condensed <- falls_trimmed |> filter(!is.na(id))
```

------------------------------------------------------------------------

## Sorting rows by a column

Function `arrange()` from `dplyr` lets you sort the dataframe by the order of values in a column.

```{r}
falls_condensed |> arrange(age)
```

`arrange(desc())` lets you arrange in descending order.

```{r}
falls_condensed |> arrange(desc(age))
```

------------------------------------------------------------------------

## Data classes

One of the main reasons for so many problems with the new dataset is that its *data classes* are not specified.

We know that some variables are categorical, some are ordered, some are quantitative, but Excel or `.csv` files do not hold this information. Certain R functions are designed to work with only specific data classes.

R data classes that are relevant to health data analysis are:

-   **numeric**
    -   **integer** (a subset of the numeric class)
-   date variables
    -   **date** and **datetime**
    -   *POSIX*, with reference to time-zones
-   **character** (free text)
-   **factor** (categorical variable)
-   **logical** (possible values: `TRUE`, `FALSE`, `NA`)
-   For time series data, it can be useful to use package zoo's "yearmon" and "yearqtr" classes.

To check which class an object (or a variable) is, you use `class()`:

```{r}
class(3.2)
class("M√©ni√®re's disease")
class(falls_condensed$age)
class(falls_condensed$date_admit)
```

You can check the classes of all variables in a dataset with `glimpse()`, from `dplyr`:
```{r}
glimpse(falls_condensed)
```


So, after we import a raw dataset, we need to tell R which classes the variables actually are ("parsing" columns).

To do this, we using parsing functions, such as `as.character()`, `as.numeric()`, `as.Date`, `as.factor()`.

------------------------------------------------------------------------

### Factors

Categorical variables are stored as factors. Factors have "levels" indicated by integers (1, 2, 3...) and corresponding "labels" which contain text. For example, in a "outcome" variable, level 1 can represent "alive", level 2 can represent "dead".

Function `as.factor()` changes the class from character into factor.

```{r}
# Check class before
class(falls_condensed$ward)
summary(falls_condensed$ward)

# Change class
falls_c1 <- falls_condensed |> mutate(ward = as.factor(ward))

# Check class after
class(falls_c1$ward)
summary(falls_c1$ward)
```

Note that once the data class matches the actual data type, `summary()` gives a much more useful output.

------------------------------------------------------------------------

### Value labels

It looks like some variables contain integers, but they are actually categorical, and should be factors.

```{r}
falls_c1 |> count(mood_disorder)
```

If you look at the rudimentary codebook in the original Excel spreadsheet, you can see that in the `mood_disorder` column a `0` means "no", `1` means "depressive disorder", and `2` means "bipolar disorder". Luckily we can change the data type into a factor and assign these value labels at the same time - by using `factor()`.

```{r}
# Change to categorical and label values
falls_c2 <- falls_c1 |> 
  mutate(mood_disorder = factor(mood_disorder,
                                levels = c(0, 1, 2),
                                labels = c("no", "depressive", "bipolar")
                                ))

# Sanity check
falls_c2 |> count(mood_disorder)
```

*Exercise 5.*

Now do the same with variable `dementia` (0: no, 1: yes, N/A: missing value). Note that any levels that you don't label will be converted into a missing value.




------------------------------------------------------------------------

### Dates

Dates and times are not as straightforward as we might initially think: think about leap years, time zones, daylight saving times, how Americans write dates, etc.

In R, dates:

-   are conceptualised as number of days passed since the 1st of January 1970.
-   are presented in YYYY-MM-DD format, e.g., 1970-01-01.

Some data import functions automatically understand if something is a date; others will keep it as a character column and you would then need to change them to dates.

Let's check what `import()` did to our variable containing dates of admission:

usually imported as character strings; we need to tell R they're, in fact, dates. Remember function `dmy()` from package `lubridate`? It transforms dates stored in any day-month-year format into the correct date class.

```{r}
# Before
summary(falls_c2$date_admit)
class(falls_c2$date_admit)
```

It was read as a date-time POSIX - taking time-zones into account. We don't really need this level of precision for this, so we can change it to a simple date.

```{r}
falls_c3 <- falls_c2 |> mutate(date_admit = as.Date(date_admit))

# After
summary(falls_c3$date_admit)
```

If you instead had a date variable read as character, you can use `lubridate`'s delicious functions to fix this. As long as all the dates follow the same order, for example, day-month-year, one simple function such as `dmy()` will guess most dates correctly:

```{r}
data.frame(date_birth = c("2/2/87", "3 Jan 1951", "12-08-47")) |> 
  mutate(date_birth_cleaned = dmy(date_birth))
```

Sometimes there can be an error where dates are read in the format Excel uses under the hood (days since 01/01/1900). To fix this, we can use this handy function from `janitor`, `excel_numeric_to_date()`:

```{r}
data.frame(excel_dates = c(42455, 42875, 41578)) |> 
  mutate(dates_cleaned = excel_numeric_to_date(excel_dates))
```

*Exercise 6*.

1.  Check the data class of the variable identifying the start of sedative medications.
2.  Change its data class to date.




------------------------------------------------------------------------

## Identifying data entry errors and changing values

Whilst exploring a dataset, you might notice that some values are incorrect. This could be because:

-   Data entry was inconsistent, e.g. spelling mistakes, upper and lowercase, or occasional use of abbreviations
-   The wrong numerical value was entered, e.g., different unit, or an extra digit was added by mistake, or a transposition error (1936 instead of 1963)
-   A value was entered in the wrong column

------------------------------------------------------------------------

### Changing values in categorical variables

Let's look at the values that people have entered in the `gender` column.

```{r}
falls_c3 |> count(gender)
```

Not ideal.

We can change everything to lower-case using `str_to_lower()`, and then use `case_match()` to fix the remaining inconsistencies. We finally use `as_factor()` to convert this character variable into a categorical variable.

Of note, in `case_match`:

- the *old* values go to the *left* of the `~`
- the *new* values go to the *right*.
- If the old values are not all the values present in the original variable, you need to specify what values those get, in the `.default` argument (and this uses a `=` rather than a `~`.)

```{r}
falls_r1 <- falls_c3 |>
  mutate(gender_new = str_to_lower(gender),
         gender_new = case_match(gender_new,
                                 "m" ~ "male",
                                 c("f", "femle") ~ "female",
                                 .default = gender_new) |> 
                  as_factor())

# Sanity check
falls_r1 |> count(gender_new, gender)
```

*Exercise 7.*

1.  Check the current categories of the variable on hospital-based cognitive-behavioural therapy.
2.  Fix any easy inconsistencies.
3.  Turn into a factor.
4.  What else would you do now with this variable?




------------------------------------------------------------------------

### Changing values in numerical variables

Histograms are a good way to identify suspicious outliers.

```{r}
falls_r1 |> ggplot(aes(age)) + geom_histogram()
```

It looks like there are two people older than 100 years. I would ask Ian to double check these two values - it'll be helpful if we can give him their IDs. Let's identify them.

```{r}
falls_r1 |> filter(age > 100) |> select(id, gender, age)
```

Imagine Ian has checked and confirmed that ID 209 was indeed 103 years old, but ID 540 was 'only' 105.

*Exercise 8* Let's correct this value.




------------------------------------------------------------------------

## Relevelling factors

Finally, we might sometimes need to reorder the categories in an ordered variable, for example because R has ordered it alphabetically. We use function `fct_relevel()` from package `forcats`.

```{r}
# Demonstrate wrong order
falls_r1 |> ggplot(aes(outcome)) + geom_bar()

# Reorder the levels in an ordered variable
falls_r2 <- falls_r1 |> mutate(outcome = fct_relevel(outcome, "Discharged home", "Transferred to other hospital", "Died in hospital"))

# Check it worked
falls_r2 |> ggplot(aes(outcome)) + geom_bar()
```

------------------------------------------------------------------------

*Challenge exercise*

1.  Import the `bristol.csv` dataset and briefly explore it.
2.  Change the data classes to the correct ones.
3.  Create a new variable with the age at admission.
4.  Explore the distribution of temperature according to gender with a Box plot.
5.  Save to file as `bristol_cleaned.dta` so you can send it to your colleague Karen, who only uses Stata.

```{r}
# Import and explore


# Change data classes


# Calculate age


# Age and sex Box plot


# Export to Stata


```

*Extra practice.*

The falls dataset is still not clean - many more variables need checking and fixing...

------------------------------------------------------------------------

## More resources

-   R for Data Science, [Chapter 11: Data import](https://r4ds.had.co.nz/data-import.html)
-   Epi R Handbook, [Chapter 8: Cleaning data](https://www.epirhandbook.com/en/cleaning-data-and-core-functions.html)

------------------------------------------------------------------------

## Solutions

```{r}
#| label: ex0_solution
# Create variable
trial_new <- trial |>
  mutate(marker_group = cut(marker,
                            breaks = c(0, 0.5, 1, 4),
                            labels = c("<0.5", "0.5-1", "‚â•1")))

# Sense check
trial_new |> group_by(marker_group) |> 
  summarise(min(marker), max(marker))
```

```{r }
#| label: ex1_solution
# Exercise 1, question 1
# 1. the column names are not in the first row
# 2. the Gender variable has values entered in many different ways
# 3. the date of birth contains integers rather than dates
# 4. some columns have very long names
# 5. some variables contain an explanation of values in a row above
# many more

# Exercise 1, question 2
# Merged cells, colour-coded rows, among other issues.

# Exercise 1, question 4
# The output is useless.
```

```{r }
#| label: ex2_solution
summary(falls_v2$`Was this patient admitted to a mental health hospital previously?`)
```

```{r }
#| label: ex3_solution
# `clean_names()` converted all upper-case letters to lower-case, it changed spaces into underscores, and it replaced triple dots with an `x`. This is a good start.
```

```{r }
#| label: ex4_solution
falls_renamed_2 |> rename(analgesia_duration = duration_of_analgesia)
```

```{r }
#| label: ex5_solution
falls_c2 |> mutate(dementia = factor(dementia, levels = c(0, 1), labels = c("no", "yes")))
```

```{r }
#| label: ex6_solution
class(falls_c3$date_start_sedation)
falls_c3 |> mutate(date_admit = as.Date(date_start_sedation))
```

```{r }
#| label: ex7_solution
falls_r1 |> count(hosp_cbt)

falls_r1 |> mutate(hosp_cbt = str_lower(hosp_cbt),
                   hosp_cbt = case_match(hosp_cbt,
                                         "declined" ~ "no",
                                         c("ys", "only 1 session") ~ "yes",
                                         .default = hosp_cbt) |> 
                              as_factor())

# I would check with Ian if 1 session is enough to count as a yes
```

```{r}
#| label: ex8_solution
falls_r1 |> mutate(age = recode(age, `125` = 105))
```

```{r}
#| label: challenge_exercise_solution
# Import and explore
bristol <- read_csv("data/bristol.csv")

bristol_cleaned <- bristol |>
  mutate(
    # Change data classes
    bed_number = factor(bed_number),
    ward_bay = factor(ward_bay),
    sex = factor(sex),
    date_birth = dmy(date_birth),
    date_admission = dmy(date_admission),
    bristol_type = factor(bristol_type),
    colour = factor(colour),
    
    # Calculate age on admission
    age = ((date_admission - date_birth) / 365.25) |> as.numeric() |> floor()
  )

# Age and sex Box plot
bristol_cleaned |> ggplot(aes(age, sex)) + geom_boxplot()

# Export
# bristol_cleaned |> haven::write_dta("data/bristol_cleaned.dta")
```
