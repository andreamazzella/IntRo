---
title: "1: The basics"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

# What you will learn

-   User interface
-   Console
-   R Markdown documents
-   Assignment
-   Functions
-   Datasets
-   Vectors

------------------------------------------------------------------------

# User interface

The RStudio interface is divided into four parts:

| Code, viewer | Environment           |
|--------------|-----------------------|
| Console      | Files, packages, help |

-   *top left*: the code script or notebook you're working on (like this one: `intRo1 basics.qmd`).
-   *bottom left*: the console (where you can input your commands)
-   *top right*: Environment (where your datasets and other "objects" are stored)
-   *bottom right*: help (and other stuff)

------------------------------------------------------------------------

# Console

The console is used to run simple commands that you don't need to save.

*Exercise 1.* In the console, add 3 and 5. You do this by using it as a calculator:

3 + 5 Enter

Now forget about the console -- it's better to keep your code in a notebook (or in a script). This is for many reasons:

1.  Easily editing your code when it doesn't work the first time you run it.
2.  Keeping track of your work so you don't have to restart from scratch every time.
3.  Sharing your work with others

------------------------------------------------------------------------

# R Markdown documents (.qmd, .Rmd)

A Markdown document, like this one (`intRo1 basics.qmd`) is composed of two things:

-   Text, which is the main component
-   "Chunks", which contain code (and comments, which are preceded by a hash symbol, #)

A chunk looks like this:

```{r}

```

A Markdown document can be opened in Visual mode (like this one) or in Source mode. Visual mode will have nicer formatting of the text outside of the code chunks.

To **run all the code in a chunk**, you click on the green triangle button at the top right of the chunk (or you place your cursor inside it and press on Windows `Ctrl` + `Shift` + `Enter`; on Mac: `⌘` + `⌥` + `Enter`.

*Exercise 2.* Run this chunk. Note where is the output displayed.

```{r}
5 - 1
```

To **run a single line**, you can click on it and press `Ctrl` + `Enter`, on Mac, `⌘` + `Enter`.

To **run any part of the code** (like two lines), you can select the code of interest and press the key combinations as above.

*Exercise 3.* Only run the line of this chunk that calculates the area of a circle - not the whole chunk.

```{r}
strsplit("erom ecno yrt - knuhc elohw eht nur ev'uoy snaem ti siht ees uoy fi", NULL) |> 
  unlist() |> rev() |> paste(collapse = "")

# Area of a circle
pi * 1.4 ^2
```

To add a new chunk, you can:

-   go to the toolbar, click `Code` → `Insert Chunk`.
-   go to the top right of the window, click on an icon with a green `+c` → `R`
-   use a keyboard shortcut
    -   Mac:`⌘` + `⌥` + `I`
    -   Windows, US keyboard: `Ctrl` + `Alt` + `I`
    -   Windows, any other keyboard: this needs resetting - go to the toolbar, `Tools` → `Modify Keyboard Shortcuts...` → type `insert chunk` in the `Filter` field → click on the shortcut area → press `Ctrl` + `Shift` + `I`.
-   you could potentially type the three backticks followed by `{r}` and close the chunk with three more backticks, but why would you?

*Exercise 4.* Add a new chunk in the space below, and use it to divide 6 by 2.

------------------------------------------------------------------------

# R scripts (.R)

An R script, for example `analysis.R`, mainly contains code, and any non-code text needs to be highlighted with a preceding `#`. There are no chunks. The output will only appear in the console and in the Plots panel.

We won't be using R scripts in this course, but you might see them elsewhere.

To create a new R script, you can:

-   go to the toolbar: `File` → `New File` → `R Script`
-   use a keyboard short-cut: `Ctrl` + `Shift` + `N` on Windows.

------------------------------------------------------------------------

# Assignment

You can tell R that something has a name; R will remember it and you can use that later in your code. This is called *assignment* and is done by using the arrow `<-` (keyboard shortcut: `Alt` + `-` on Windows, `⌥` + `*` on Mac) Assignment creates a new "object". The following code means: "radius" gets the value of 5.7. "radius" is a new object.

*Exercise 5.* Run this chunk. In which part of the screen is R storing this value?

```{r}
# Assigning a value to "radius"
radius <- 5.7

# Visuaising the value of "radius"
radius
```

From now, you can use the object "radius" in the rest of your code, and R will know what you mean.

*Exercise 6.* Calculate the circumference of a circle of radius 5.7, without typing 5.7 (Formula: C = 2πr).

```{r}

```

Note that assigning a new value to an existing object will permanently replace the old version.

```{r}
radius <- 18
radius
```

------------------------------------------------------------------------

# Functions

In programming, a function is like a verb. It takes something (its "arguments"), it does something to it, and gives you back an output. In R, the arguments of a function are written in brackets.

The square root function, `sqrt()`, is very simple: it takes a single argument (a number) and it returns its square root.

```{r}
# Square root function
sqrt(64)
```

*Exercise 7.*

1.  Create a new chunk below
2.  Use it to calculate the natural logarithm of 100.

------------------------------------------------------------------------

# Datasets

R is mostly built around "dataframes": data in table format.

Some dataframes are included in R, so we can use them to practise.

For example, let's explore a small dataset from an experiment on the impact of vitamin C supplementation on tooth length among 60 guinea pigs.

To have a look at this dataset, you can "call" its name or you can use the function `View()`. (Caution: R is case-sensitive)

```{r}
teeth <- datasets::ToothGrowth

# Option 1: dataframe name
teeth
```

```{r}
# Option 2: using View().
# NB - this will open a new tab
View(teeth)
```

A dataframe has columns called *variables*. These are the variables in `teeth`:

-   `len`: tooth cell length
-   `supp`: supplement type (VC = vitamin C; OJ = orange juice)
-   `dose`: dose of vitamin C in mg/day

## Using functions on a dataset column

Now let's use the `mean()` and `sd()` functions to calculate the average tooth cell length and its standard deviation.

R can work with more than one dataset at the time. For this reason, every time you refer to a variable, you also need to tell R which dataset is that variable from. You do this by typing a `$` sign between the dataset and the variable name. (The `$` sign is technically called the "exposition operator").

```{r}
mean(teeth$len)
# The above reads: calculate the mean of a variable taken from `teeth` and called `len`.

sd(teeth$len)
```

*Exercise 8.* Let's use another dataset, `chickens`. This contains info on chicken weights (in grams) and their feed type.

1.  Calculate the `median` chicken weight.
2.  Calculate the standard deviation of chicken weight.

```{r}
# Load the data
chickens <- datasets::chickwts

# Preview the dataframe
chickens

# Median chicken weight
# ...

# Standard deviation
# ...

```

------------------------------------------------------------------------

# Vectors

In R, a **vector** is a list of objects of the same type, in a specific order. For example, 5 2 4 is a vector (of numbers); "cirrhosis" "fibrosis" "hepatitis" is a vector (of characters).

Of note, every column in a dataframe is a vector!

You create a vector using function `c()`, which stands for "combine":

```{r}
c(5, 2, 4)

c("cirrhosis", "fibrosis", "hepatitis")
```

Vectors are used: - when the argument of a function needs to contain more than one element, - when we want to apply a function to more than one object.

```{r}
# A function that will summarise all elements of a vector
mean(c(6, 7, 8))

# A function that will apply to each element separately
log(c(100, 10))
```

Why do you think the output of the chunk above is different to the below?

```{r}
log(100, 10)
```

Objects in a vector can have names:

```{r}
c("age" = 19, "height" = 185, "systolic_BP" = 132)
```

------------------------------------------------------------------------

*Final exercise.*

1.  Explore the `Theoph` dataset
2.  Calculate the mean weight of its study participants
3.  Convert this mean weight from kilograms to pounds. (1 kg = approx. 2.2 pounds)

```{r}
# Import
theoph <- datasets::Theoph

# Your code below






```

------------------------------------------------------------------------

# Solutions

```{r}
# Exercise 6
2 * radius * pi

# Exercise 7
log(100)

# Exercise 8
median(chickens$weight)
sd(chickens$weight)

# Final exercise
# 1. Explore dataset
View(theoph)

# 2. Calculate mean weight
mean(theoph$Wt)

# 3. Convert mean weight to pounds
mean(theoph$Wt) * 22

# An alternative way
mean_kg <- mean(theoph$Wt)
mean_kg * 2.2
```

------------------------------------------------------------------------
