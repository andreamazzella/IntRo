---
title: "04: Summarising data"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

## Content

-   Summarising data with `dplyr` and `janitor`
    -   Categorical variables
    -   Continuous variables
    -   Grouped summaries
-   Creating a Table 1 with `gtsummary`

------------------------------------------------------------------------

## Recap from topic 03_import

1.  Insert a new chunk below.
2.  Import the `sites` sheet from the `syphilis.xlsx` file, contained in the `/data/raw` folder.
3.  Preview it.
4.  *Bonus:* Create a graph with a dot indicating the date of opening of each site; the dot should have a different colour according to that trust's type.

------------------------------------------------------------------------

## Load packages

In this session, you'll use functions from a few more packages:

-   [`dplyr`](https://dplyr.tidyverse.org/reference/index.html) to transform data with `summarise()` and `count()` - part of the core tidyverse
-   [`janitor`](https://sfirke.github.io/janitor/index.html) to count and cross-tabulate data with `tabyl()`
-   [`gtsummary`](https://www.danieldsjoberg.com/gtsummary/) to create and save a summary Table 1 with `tbl_summary()`
-   [`gt`](https://gt.rstudio.com/) to save a table to file.

Before running this chunk, please ensure that you have these packages installed.

```{r}
library(dplyr)
library(ggplot2)
library(janitor)
library(gt)
library(gtsummary)
```

------------------------------------------------------------------------

For this topic, we'll use `trial`, a sample dataset from package `gtsummary`. This contains the baseline characteristics of 200 patients who received two different cancer drugs (`trt`) and treatment outcomes: `response` and `death`. Check its documentation to learn more.

```{r}
trial <- gtsummary::trial
trial
help(trial)
```

> *Issues with `gtsummary`?* As of March 2025, `gtsummary` requires package `glue` to be installed with version 1.8.0 or above. If you don't have that, please try updating `glue`. If you can't get `glue` to update, you might need to delete the `glue` folder from where your packages are saved. This could be something like `C:/Users/name.surname/AppData/Local/R/win-library/4.4` . You can then reinstall `glue` .

------------------------------------------------------------------------

### Summarising data

#### Using `summary()`

You can use `summary()` to get a quick summary of your entire dataset.

#### Exercise 1

-   Run the following chunk.
-   What is R doing to each variable?
-   What is the median `age`?
-   How many missing values does the `response` variable have?

```{r}
summary(trial)
```

> *Want to know more?* This function doesn't provide a helpful summary of character variables, like `trt`. Once you specify the data class, the output will be more useful; see `08_clean.qmd` for how to do this.

------------------------------------------------------------------------

#### `dplyr` basics

We'll frequently use `dplyr` functions, like `summarise()`. They have some things in common:

-   Their first argument is always a data frame.
-   The following arguments refer to columns by using their names, without quotes
-   The output is always a new data frame; the original data frame is left unchanged.

Because the first argument and the output is always the dataframe, we chain `dplyr` functions one after the other using the pipe, `|>`. We'll cover pipes in more detail later, but for the moment, be aware that `dat |> summarise(...)` is equivalent to `summarise(dat, ...)`.

### Using `summarise()`

We can summarise a data.frame using the `summarise()` function from package `dplyr` and some helper functions like `min()`, `mean()`, `median()`, `sd()`. See `help(summarise)` for a list of helper functions.

For example, to calculate the mean `ttdeath` across every row we can run:

```{r}
trial |> 
  summarise(mean(ttdeath))
```

We can also include more summary metrics in the same `summarise()` call. For example, I recommend always including `n()` so you can get the count of records in each group.

```{r}
trial |> 
  summarise(
    n(),
    mean(ttdeath),
    sd(ttdeath)
    )
```

#### Exercise 2

1.  Try and calculate the average age.
2.  Why do you get an `NA` result?
3.  Use `help(mean)` and see if you can figure out how to calculate the mean age.

```{r}

```

------------------------------------------------------------------------

### Grouped summaries

What if we wanted to calculate the mean age in specific groups of patients, such as by treatment group?

We can use the `summarise()` again, but this time we specify which variable indicates the groups, in the `.by =` argument

```{r}
trial |>
  summarise(
    n(),
    mean(age, na.rm = TRUE),
    .by = trt
    )
```

We can also add a name to the new summary columns:

```{r}
trial |>
  summarise(
    count = n(),
    avg_age = mean(age, na.rm = TRUE),
    avg_follow_up = mean(ttdeath),
    sd_follow_up = sd(ttdeath),
    .by = trt
    )
```

Remember that we can visualise the distribution of a continuous variable across a categorical variable with Box plots:

```{r}
trial |>
  ggplot(aes(age, trt)) +
  geom_boxplot()
```

We can also group by more than one variable.

```{r}
trial |>
  summarise(
    n(),
    avg_follow_up = mean(ttdeath, na.rm = T) |> round(1),
    .by = c(trt, death)
    )
```

#### Exercise 3

Calculate the median and maximum marker levels in the four stage groups.

```{r}

```

------------------------------------------------------------------------

### Frequency tables

To tabulate categorical data, we have many options, among which:

-   `count()` from `dplyr`
-   `tabyl()` from `janitor`.

#### Exercise 4

Run these two chunks and compare their outputs.

-   What are the differences?
-   Which function do you prefer?

```{r}
trial |>
  count(response)
```

```{r}
trial |>
  tabyl(response)
```

#### Exercise 5

1.  Summarise the dataset to calculate the percentage of patients with each cancer stage.
2.  Show the same with an appropriate graph.

```{r}
# 1. Frequency table


# 2. Graph

```

------------------------------------------------------------------------

### Cross-tabulation

We're often interested in showing the distribution of *two* categorical variables against each other, i.e., cross-tabulation (two-way tables). This way we can check counts and percentages of each possible combination of factors.

To make two-way tables you can use:

-   `count()` from `dplyr`, but it returns an output in long format and without percentages.
-   `tabyl()` and some more functions from `janitor`

```{r}
# Just counts
trial |>
  count(trt, response)

trial |>
  tabyl(trt, response)

trial |>
  tabyl(trt, response) |>
  # Change from counts to row percentages (as proportions)
  adorn_percentages("row") |>
  # Label percentages
  adorn_pct_formatting() |>
  # Add counts back 
  adorn_ns()
```

#### Exercise 6

Write some code to calculate the percentage of people who were alive at the end of the study stratified by cancer grade. (If you can't remember the names of your variables, you can run `names(trial)`.

```{r}

```

------------------------------------------------------------------------

### The `|>` pipe

`|>` is called a *pipe*; it's a programming tool that helps improve code readability. It was introduced in R version 4.1 after the success of the `magrittr` pipe, `%>%`.

These two lines are equivalent:

```{r}
trial |> count(response)

count(trial, response)
```

You can see that the pipe is:

1.  Taking what's before it
2.  Shifting it to the function that follows, as its first argument.

You can also have more than one pipe, as you've seen above. It still works the same, but it makes code much easier to write and read.

```{r}
# This code...
trial |> 
  tabyl(trt, response) |>
  adorn_percentages("row") |>
  adorn_pct_formatting() |>
  adorn_ns()

# ...is equivalent to:
adorn_ns(adorn_pct_formatting(adorn_percentages(tabyl(trial, trt, response), "row")))

# and this
tab_trial <- tabyl(trial, trt, response)
tab_trial_perc <- adorn_percentages(tab_trial, "row")
tab_trial_perc_formt <- adorn_pct_formatting(tab_trial_perc)
adorn_ns(tab_trial_perc_formt)

# Which one would you much rather write? And read?
```

You can set a keyboard shortcut for the `|>` pipe. Go to Tools → Global options → Code → tick "Use native pipe operator". After this, pressing *Ctrl + Shift + M* (on Windows) will insert a `|>` pipe.

#### Exercise 7

Rewrite the following code using the pipe.

```{r}
# Without a pipe
tabyl(trial, trt, response)

# With the pipe

```

Many functions from modern R packages list the data.frame as their first argument. This includes key functions from `ggplot2`, `dplyr`, `janitor`.

```{r}
trial |>
  ggplot(aes(trt, age)) +
  geom_boxplot()
```

------------------------------------------------------------------------

## Summary tables

Summary data is often presented in a "Table 1": this contains a summary of the baseline characteristics, with frequencies and percentages for categorical variables, and means or medians with a measure of variability for continuous variables. Usually these are painful to prepare because you need to do a lot of calculations and then painstakingly copy them into a table. Also, if the data changes (new data, or new variables) you need to redo it from scratch.

Package `gtsummary()` allows us to programmatically create publication-ready summary tables that can be automatically exported into .html or .doc formats.

------------------------------------------------------------------------

### Basic `gtsummary` table

This package is somewhat similar to `ggplot2`. The main function is `tbl_summary()`, which we can then build upon.

By default it summarises *all* dataset variables, but you can `select()` only some.

```{r}
trial |>
  select(trt, age, grade, response) |> 
  tbl_summary()
```

Note that the variables have been renamed, e.g., "Tumor Response" rather than `response`. This is because this dataset is in a special "labelled" format. This won't happen automatically with your data, unless you pre-process it with package `labelled` - by default, the variable names will be displayed in the table.

------------------------------------------------------------------------

### Stratified `gtsummary` table

Using argument `by =` it's possible to stratify the table according to a categorical variable.

For example, let's stratify by treatment arm:

```{r}
trial |>
  select(age, grade, trt, response) |> 
  tbl_summary(by = trt)
```

We might still want to also have a column with overall values. We do this by piping the table into `add_overall()`. Because this will be our final table, we also assign it to a name of our choice.

```{r}
final_table <- trial |>
  select(age, grade, marker, trt, response, death, ttdeath) |> 
  tbl_summary(by = trt) |> 
  add_overall()

final_table
```

#### Exercise 8

Create a table 1 of the `ToothGrowth` dataset, stratifying by supplement type but keeping an overall column.

```{r}

```

### Save a `gtsummary` table to file

We can use `gtsave()` to save a `gt` table to a file, so we first need to convert our `gtsummary` table into a regular `gt` table using `as_gt()`. Valid extensions include `.pdf`, `.html`, `.png`, `.docx`, `.rtf`.

NB: This system is not perfect - for example, with .docx and .pdf the formatting might be partially lost in translation.

```{r}
final_table |>
  as_gt() |> 
  gtsave("output/table1.html")
```

------------------------------------------------------------------------

## Learning more

-   R for Data Science (2ed) chapter 3.5.2: [Data transformation, `summarize`](https://r4ds.hadley.nz/data-transform.html#sec-summarize)
-   `janitor` documentation, [tabyls](https://sfirke.github.io/janitor/articles/tabyls.html)
-   `gtsummary` documentation, [Tutorial: `tbl_summary`](https://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)

------------------------------------------------------------------------

## Solutions

```{r}
#| label: Exercise 2 solution

trial |>
  summarise(mean(age))
trial |>
  summarise(mean(age, na.rm = TRUE))
```

```{r}
#| label: Exercise 3 solution

trial |>
  summarise(
    median(marker, na.rm = TRUE),
    max(marker, na.rm = TRUE),
    .by = stage
  )
```

```{r}
#| label: Exercise 5 solution
trial |>
  tabyl(stage)

ggplot(trial, aes(x = stage)) +
  geom_bar()
```

```{r}
#| label: Exercise 6 solution
trial |>
  tabyl(grade, death) |>
  adorn_percentages("row") |>
  adorn_pct_formatting()
```

```{r}
#| label: Exercise 7 solution
teeth <- datasets::ToothGrowth

teeth |> 
  tbl_summary(by = supp) |> 
  add_overall()
```

------------------------------------------------------------------------
