---
title: "3: Summarising data"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
---

------------------------------------------------------------------------

# What you will learn

-   Data summarisation
    -   Categorical variables
    -   Continuous variables
    -   Grouped summaries
-   Table 1 with `gtsummary`

------------------------------------------------------------------------

# Recap from topic 03

...

------------------------------------------------------------------------

Load packages

```{r}
library(dplyr)        # count, group_by, summarise
library(ggplot2)
library(gt)           # gtsave
library(gtsummary)    # tbl_summary, as_gt
library(summarytools) # freq, ctable
```

NB:If you use Mac or Linux, you need to install some additional software to use `summarytools`. See [here](https://github.com/dcomtois/summarytools).

*`The following objects are masked from 'package [...]` - what does it mean?*

Two packages can contain a function with the same name - for example, `filter()` is present in both the base R module `stats` and in `dplyr`. If you load `dplyr`, R will warn you that from now on, every time you call `filter()`, it will use its `dplyr` form. In the rare cases in which you want to force R to use the function from a specific package, you can preface the function with `packagename::`. For example, `stats::filter(...)` will tell R to specifically use the `filter()` function from `stats` (and not the one from `dplyr`).

------------------------------------------------------------------------

For this topic, we'll use `trial`, a sample dataset from package `gtsummary`. This contains the baseline characteristics of 200 patients who received two different cancer drugs (`trt`) and treatment outcomes: `response` and `death`. Check its documentation to learn more.

```{r}
trial <- gtsummary::trial
trial
help(trial)
```

------------------------------------------------------------------------

# Data summarisation

`summary()` is a useful function that lets you get a quick summary of your entire dataset (or just a single variable).

*Exercise 1.*

-   Run the following chunk.
-   What is R doing to each variable?
-   What is the median `age`?
-   How many missing values does the `response` variable have?

```{r}
summary(trial)
```

*Want to know more?*

This only works well if the variables are coded in the correct data classes, so it will not work well with datasets that have not been cleaned first. See `intRo6 clean.Rmd` for how to do this.

------------------------------------------------------------------------

## Frequency tables

To tabulate categorical data, we have many options, among which:

-   `table()` from base R,
-   `count()` from `dplyr`,
-   `freq()` from package `summarytools`.

*Exercise 2.*

Run these lines of code *one at a time* and compare their outputs.

-   What's the difference?
-   Which function do you prefer?
-   What does the `useNA` argument do?

```{r}
# Basic frequency table
table(trial$response)

# With missing values
count(trial, response)

# With percentages
freq(trial$response)
```

*Exercise 3.*

1.  Write a line of code that will calculate the percentage of patients with each cancer stage.
2.  Show the same with an appropriate graph.

```{r}
# 1. Frequency table


# 2. Bar plot

```

------------------------------------------------------------------------

## Cross-tabulation

We're often interested in showing the distribution of *two* categorical variables against each other, i.e., cross-tabulation (two-way tables). This way we can check counts and percentages of each possible combination of factors.

To make two-way tables you can use:

-   `table()` from base R, but it doesn't calculate percentages.
-   `count()` from `dplyr`, but it returns an output in long format and without percentages.
-   `ctable()` from `summarytools`; it's a very customisable function.

```{r}
table(trial$trt, trial$response, useNA = "ifany")

count(trial, trt, response)

# With row percentages
# NB: summarytools 1.0.1 has an issue with R 4.1 - the following two lines do not work
ctable(trial$trt, trial$response, useNA = "no")

# With column percentages (proportions)
ctable(trial$trt, trial$response, prop = "c", useNA = "no")
```

*Exercise 4.*

Write some code to calculate the percentage of people with `grade` `I` cancer who were alive at the end of the study. (If you can't remember the names of your variables, you can run `names(trial)`.

```{r}

```

------------------------------------------------------------------------

## Summarising continuous variables

As we've seen previously, to summarise continuous variables, you can use functions `mean()`, `median()`, `sd()` -- or you can use `summary()` again:

```{r}
mean(trial$ttdeath)
median(trial$ttdeath)
sd(trial$ttdeath)
descr(trial$ttdeath)
```

*Exercise 5.*

1.  Try and calculate the average age with `mean()`.
2.  Why do you get this result?
3.  Use `help(mean)` to see if you can figure out how to fix this.

```{r}

```

You can also get many summary measures in one go by passing a variable to `summary()`.

```{r}
summary(trial$marker)
```

------------------------------------------------------------------------

## Grouped summaries with `dplyr`

What if we wanted to calculate the mean age in specific groups of patients, such as by treatment group?

We can use two powerful functions from package `dplyr`: `group_by()` and `summarise()`. Combined, these two functions collapse the dataset according to a categorical variable, and summarise it with on or more other functions.

```{r}
trial |>
  group_by(trt) |> 
  summarise(mean(age, na.rm = TRUE))
```

(NB: `summarise()` is different from the function we used above, `summary()`!)
(Please ignore the `|>` symbol for now; we'll come back to it soon).

You can summarise with any of these functions:

-   `mean()`, `median()`,
-   `sd()`, `IQR()`,
-   `min()`, `max()`,
-   `n()`, `n_distinct()`

We can use as many of these as you want in a single `summarise()` call, and you can also summarise more than one variable at the same time. `n()` will count the observations in that group.

```{r}
trial |>
  group_by(trt) |> 
  summarise(count = n(),
            avg_age = mean(age, na.rm = TRUE),
            avg_follow_up = mean(ttdeath),
            sd_follow_up = sd(ttdeath))
```

Remember that we can visualise the distribution of a continuous variable across a categorical variable with Box plots:

```{r}
trial |>
  ggplot(aes(age, trt)) +
  geom_boxplot()
```

We can also group by more than one variable.

```{r}
trial |>
  group_by(trt, death) |> 
  summarise(avg_follow_up = mean(ttdeath, na.rm = T) |> round(1))
```

*Exercise 6.*

Calculate the median age and the age interquartile range in the two response groups.

```{r}

```

------------------------------------------------------------------------

## What is `|>`?

`|>` is called a *pipe*; it's a programming tool that helps improve code readability. It was introduced in R version 4.1.

These two lines are equivalent:

```{r}
trial |> count(response)

count(trial, response)
```

You can see that the pipe is taking what's before it and it's shifting it as the first argument of the function that follows.

You can also have more than one pipe, as you've seen above. It still works the same, but it makes code much easier to write and read.

```{r}
# This code...
trial |>
  group_by(trt) |> 
  summarise(mean(ttdeath))

# ...is equivalent to:
summarise(group_by(trial, trt), mean(ttdeath))

# Which one would you much rather write?
```

------------------------------------------------------------------------

# Summary tables

Summary data is often presented in a "Table 1": this contains a summary of the baseline characteristics, with frequencies and percentages for categorical variables, and means or medians with a measure of variability for continuous variables. Usually these are painful to prepare because you need to do a lot of calculations and then painstakingly copy them into a table. Also, if the data changes (new data, or new variables) you need to redo it from scratch.

Package `gtsummary()` allows us to programmatically create publication-ready summary tables that can be automatically exported into .html or .doc formats.

------------------------------------------------------------------------

## Basic `gtsummary` table

This package is somewhat similar to `ggplot2`. The main function is `tbl_summary()`, which we can then build upon.

By default it summarises *all* dataset variables, but you can `select()` only some.

```{r}
trial |>
  select(trt, age, grade, response) |> 
  tbl_summary()
```

Note that the variables have been renamed, e.g., "Tumor Response" rather than `response`. This is because this dataset is in a special "labelled" format. This won't happen automatically with your data, unless you pre-process it with package `labelled` - by default, the variable names will be displayed in the table.

------------------------------------------------------------------------

## Stratified `gtsummary` table

Using argument `by =` it's possible to stratify the table according to a categorical variable.

For example, let's stratify by treatment arm:

```{r}
trial |>
  select(age, grade, trt, response) |> 
  tbl_summary(by = trt)
```

We might still want to also have a column with overall values. We do this by piping the table into `add_overall()`. Because this will be our final table, we also assign it to a name of our choice.

```{r}
final_table <- trial |>
  select(age, grade, marker, trt, response, death, ttdeath) |> 
  tbl_summary(by = trt) |> 
  add_overall()

final_table
```

*Exercise 7.*

Create a table 1 of the `ToothGrowth` dataset, stratifying by supplement type but keeping an overall column.

```{r}

```

## Save a `gtsummary` table to file

We can use `gtsave()` to save a `gt` table to a file, so we first need to convert our `gtsummary` table into a regular `gt` table using `as_gt()`. Valid extensions include `.pdf`, `.html`, `.png`, `.docx`, `rtf`\`.

NB: This system is not perfect - for example, with .docx and .pdf the formatting might be partially lost in translation.

```{r}
final_table |>
  as_gt() |> 
  gtsave("table1.html")
```

------------------------------------------------------------------------

## Learn more

I recommend these resources:

-   R for Data Science
    -   Chapter 7: [Exploratory data analysis](https://r4ds.had.co.nz/exploratory-data-analysis.html)
    -   Chapter 5.6: [Grouped summaries with `summarise`](https://r4ds.had.co.nz/transform.html#grouped-summaries-with-summarise)
-   `gtsummary` documentation, [Tutorial: `tbl_summary`](https://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)

------------------------------------------------------------------------

## Solutions

```{r include=FALSE}
# Exercise 3
tabyl(trial, stage)
ggplot(trial, aes(x = stage)) + geom_bar()

# Exercise 4
  # With `tabyl`
trial |> tabyl(grade, death) |>
  adorn_totals(c("row", "col")) |> 
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns(position = "front")

  # With `ctable`
ctable(trial$grade, trial$death, useNA = "no")

# Exercise 5
mean(trial$age, na.rm = TRUE)

# Exercise 6
trial |>
  group_by(response) |>
  summarise(mean_age = mean(age, na.rm = TRUE),
            IQR_age = IQR(age, na.rm = TRUE))

# Exercise 7
teeth <- datasets::ToothGrowth

teeth |> 
  tbl_summary(by = supp) |> 
  add_overall()
```

------------------------------------------------------------------------
