---
title: "01: The basics"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

# Content

-   The RStudio interface
-   Using the console
-   Using and creating scripts
    -   R scripts
    -   Quarto Markdown documents
-   Assigning values
-   Using functions
-   Using packages
-   Exploring data frames

------------------------------------------------------------------------

# The RStudio interface

The RStudio interface is divided into four parts:

| Code, Viewer      | Environment, Connections, Git |
|-------------------|-------------------------------|
| Console, Terminal | Files, Packages, Help         |

-   *top left*: the code script or notebook you're working on (like this one: `intRo1 basics.qmd`).
-   *bottom left*: the console (where you can input your commands)
-   *top right*: Environment (where your datasets and other "objects" are stored)
-   *bottom right*: help (and other stuff)

------------------------------------------------------------------------

# Console

The console is used to run simple commands that you don't need to save.

*Exercise 1.* In the console, add 3 and 5. You do this by using it as a calculator: Type 3 + 5, then press Enter.

Now forget about the console: it's better to keep your code saved in a script. This is for many reasons:

1.  If your code throws an error, you can easily edit it and re-run it.
2.  It allows you to keep track of your work so you don't have to restart from scratch every time.
3.  You can sharing your work with others

------------------------------------------------------------------------

# R scripts (.R)

An R script, for example `analysis.R`, mainly contains code, and any non-code text needs to be highlighted with a preceding `#`.

The output will only appear in the console and in the Plots panel.

An advantage of R scripts over Quarto Markdown documents is that they can be run from other scripts.

To create a new R script, you can:

-   Go to the toolbar: `File` → `New File` → `R Script`
-   Use a keyboard short-cut: `Ctrl` + `Shift` + `N` on Windows.
-   Go to the Files tab in the bottom right of the screen and click on the `New Blank File` icon → `R Script` (this will automatically save the file in the folder you see)

You can keep your R script organised using sections, which will appear in the Outline. You create an R script section by:

1.  Clicking on the toolbar: `Code` → `Insert Section...` (or using the short-cut `Ctrl` + `Shift` + `R` on Windows)
2.  Writing the section title

------------------------------------------------------------------------

# Quarto Markdown documents (.qmd)

A Quarto Markdown document like this one (`intRo1 basics.qmd`) is mainly composed of two things:

-   **Text**, which is the main component.
    -   This can be formatted *as if it's a text editor.* If you're using Visual editing, you will find a tool bar with formatting options. If you're using Source, you can use Markdown syntax.
    -   You can keep your qmd organised with headings. If a line starts with a hash symbol, `#`, it will become a level 1 heading; with `##`, a level 2 heading, etc. Headings will be shown in the Outline.
-   **Chunks**, which contain code (and comments, which are preceded by a hash symbol, `#`). A chunk looks like this:

```{r}
# This section is a chunk. This line is a comment; the line below is code.
print(R.version.string)
```

You can use a qmd:

-   Interactively, running chunks yourself
-   By rendering it into a document (this will be covered in session `12_markdown`)

To **run all the code in a chunk**, you click on the green triangle button at the top right of the chunk (or you place your cursor inside it and press on Windows `Ctrl` + `Shift` + `Enter`; on Mac: `⌘` + `⌥` + `Enter`.

*Exercise 2.* Run this chunk. Note where is the output displayed.

```{r}
5 - 1
```

To **run a single line**, you can click on it and press `Ctrl` + `Enter`, on Mac, `⌘` + `Enter`.

To **run any part of the code** (like two lines), you can select the code of interest and press the key combinations as above.

*Exercise 3.* Only run the line of this chunk that calculates the area of a circle - not the whole chunk.

```{r}
strsplit("erom ecno yrt - knuhc elohw eht nur ev'uoy snaem ti siht ees uoy fi", NULL) |> 
  unlist() |> rev() |> paste(collapse = "")

# Area of a circle
pi * 1.4 ^2
```

To add a new chunk, you can:

-   Go to the toolbar, click `Code` → `Insert Chunk`.
-   Go to the top right of the window, click on an icon with a green `+c` → `R`
-   Use a keyboard shortcut
    -   Mac:`⌘` + `⌥` + `I`
    -   Windows, US keyboard: `Ctrl` + `Alt` + `I`
    -   Windows, any other keyboard: this needs resetting - go to the toolbar, `Tools` → `Modify Keyboard Shortcuts...` → type `insert chunk` in the `Filter` field → click on the shortcut area → press `Ctrl` + `Shift` + `I`.
-   You could potentially type the three backticks ```` ``` ```` followed by `{r}` and close the chunk with three more backticks, but why would you?

A Markdown document can be opened in Visual mode (like this one) or in Source mode. Visual mode will have nicer formatting of the text outside of the code chunks.

You can see the outline of the qmd file by clicking on the `Outline` button in the top right part of this panel.

You can create a new Markdown document, you can:

-   Go to the toolbar: `File` → `New File` → `Quarto document...` → set options → click `Create`
-   Go to the Files tab in the bottom right of the screen and click on the `New Blank File` icon → `Quarto doc...` (this will automatically save the file in the folder you see)

*Exercise 4.*

1.  Add a new chunk in the space below
2.  Use this new chunk to divide 6 by 2

------------------------------------------------------------------------

# Assignment

You can tell R that something has a name; R will remember it and you can use that later in your code. This is called *assignment* and is done by using the arrow `<-` (keyboard shortcut: `Alt` + `-` on Windows, `⌥` + `*` on Mac) Assignment creates a new "object". The following code means: "radius" gets the value of 5.7. "radius" is a new object.

*Exercise 5.* Run this chunk. In which part of the screen is R storing this value?

```{r}
# "radius" gets the value of 5.7
radius <- 5.7
```

From now, you can use the object "radius" in the rest of your code, and R will know what you mean.

Please note that when you assign a value, R does not show you any result. If you want to see the result, you need to ask for it:

```{r}
# Visualising the value of "radius"
radius
```

*Exercise 6.* Calculate the double of the value assigned to radius, without typing 5.7.

```{r}

```

Note that assigning a new value to an existing object will permanently overwrite the old version.

```{r}
radius <- 18
radius
```

------------------------------------------------------------------------

# Using functions

In programming, a function is like a verb. It takes something (its "arguments"), it does something to it, and gives you back an output. In R, the arguments of a function are written in brackets.

The square root function, `sqrt()`, is very simple: it can take a single argument (a number) and it will return its square root.

```{r}
# Square root function
sqrt(64)
```

Many functions take more arguments. For example, `seq()`, used to generate regular sequences, needs values for these arguments: `from`, `to`, `by`.

```{r}
# Create a regular sequence of numbers from 1996 to 2040, by 4
seq(from = 1996, to = 2040, by = 4)
```

You can find information on a function by using `help()`; the documentation will be shown in the bottom right part of the screen.

```{r}
help(seq)
```

*Exercise 7.*

1.  Create a new chunk below.
2.  Use it to calculate the natural logarithm of 100.

------------------------------------------------------------------------

# Using packages

R has some core functions, like the ones we've used so far: `sqrt()`, `mean()` and `seq()` and several more advanced ones (for example, the function for logistic regression). There are also extra functions made by programmers and grouped into "packages", which need to be downloaded (and loaded) separately.

Just like an app, you only need to install a package only once, but you then need to load it every time you're in a new R session and want to use some of its functions. You can then update them as required.

## Step 1: Download and install a package

To download and install a package, I recommend you use one these options:

-   via the RStudio graphical interface: in the bottom right quarter of the screen, click on `Packages` and then `Install`. You type the name of the package in the empty field and then click on the `Install` button.
-   by calling the `install.packages()` function *from the console*, adding the package name in quotes. This might take a bit of time if the packages are large. I recommend *against* keeping `install.packages()` calls in your script - this is because you only need to run it once, among other reasons.

You can check if a package is already installed by going to the `Packages` tab and searching for its name.

*Exercise 8.* Install packages `readr`, `ggplot2` and `dplyr`.

## Step 2: Load the package

You can then load (open) the package with `library()`.

```{r}
library(readr)
```

------------------------------------------------------------------------

## Step 3: Using functions from a package

If you've loaded a package, you can directly use all functions contained within it. For example, we're soon going to use `readr`'s function `read_csv()` just by calling it.

You can also use a function from a package that you have installed, even if you haven't loaded it, by using `packagename::function()`:

```{r}
ggplot2::ggplot()
```

This can be helpful when you want to clarify which package the function is from, for example because:

-   Two packages have a function with the same name (e.g., `filter` is a function in both `stats` and `dplyr`)
-   The function is not commonly used

# Exploring data frames

A large part of R is built around `data.frame`s: data in table format.

For example, let's explore a small table of patient-level data on bacteraemias. For the moment, run this code without focussing on the `read_csv` function - we'll cover it in session `03_import`.

```{r}
bacteraemias <- read_csv("data/raw/bacteraemias.csv")
```

To have a look at this dataset, you can:

-   Option 1: "call" its name. As you're in a qmd document, the table will be displayed immediately under the chunk. You can use the arrows and the numbers to show more columns and more rows.

```{r}
bacteraemias
```

-   Option 2: use function `View()` or click on its name in the Environment tab. This will open a spreadsheet-style data viewer in new tab.

```{r}
View(bacteraemias)
```

You can use `glimpse()` (from package `dplyr`) to have a quick summary of the number of rows and columns, the list of variables, their types and the first few values in each column.

```{r}
dplyr::glimpse(bacteraemias, width = 100)
```

------------------------------------------------------------------------

*Push exercise*.

1.  Create a new chunk in the space below.
2.  Preview the `msleep` data frame, which is available from package `ggplot2`.
3.  Assign it to a new object called `mammals_sleep`.
4.  Look up the documentation for function `summary()`.
5.  Use `summary()` to summarise the new object you've created.

------------------------------------------------------------------------

# Learning more

-   R for Data Science (2e)
    -   [Workflow: basics](https://r4ds.hadley.nz/workflow-basics)
    -   [Workflow: scripts and projects](https://r4ds.hadley.nz/workflow-scripts)

------------------------------------------------------------------------

# Solutions

```{r}
#| label: exercise 6 solution
2 * radius
```

```{r}
#| label: exercise 7 solution
log(100)
```

```{r}
#| label: push exercise solution

# Q2
ggplot2::msleep

# Q3
mammals_sleep <- ggplot2::msleep

# Q4
help(summary)

# Q5
summary(mammals_sleep)
```

------------------------------------------------------------------------
