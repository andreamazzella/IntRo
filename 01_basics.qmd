---
title: "1: The basics"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

# What you will learn

-   The RStudio interface
-   Using the console
-   Creating R scripts
-   Creating Quarto Markdown documents
-   Assigning values
-   Using functions
-   Using packages
-   Using tables of data
-   Using vectors

------------------------------------------------------------------------

# The RStudio interface

The RStudio interface is divided into four parts:

| Code, Viewer      | Environment, Connections, Git |
|-------------------|-------------------------------|
| Console, Terminal | Files, Packages, Help         |

-   *top left*: the code script or notebook you're working on (like this one: `intRo1 basics.qmd`).
-   *bottom left*: the console (where you can input your commands)
-   *top right*: Environment (where your datasets and other "objects" are stored)
-   *bottom right*: help (and other stuff)

------------------------------------------------------------------------

# Console

The console is used to run simple commands that you don't need to save.

*Exercise 1.* In the console, add 3 and 5. You do this by using it as a calculator: Type 3 + 5, then press Enter.

Now forget about the console: it's better to keep your code saved in a script. This is for many reasons:

1.  If your code throws an error, you can easily edit it and re-run it.
2.  It allows you to keep track of your work so you don't have to restart from scratch every time.
3.  You can sharing your work with others

------------------------------------------------------------------------

# R scripts (.R)

An R script, for example `analysis.R`, mainly contains code, and any non-code text needs to be highlighted with a preceding `#`.

The output will only appear in the console and in the Plots panel.

We won't be using R scripts in this course, but you will see them elsewhere. An advantage is that they can be run from other

To create a new R script, you can:

-   Go to the toolbar: `File` → `New File` → `R Script`
-   Use a keyboard short-cut: `Ctrl` + `Shift` + `N` on Windows.
-   Go to the Files tab in the bottom right of the screen and click on the `New Blank File` icon → `R Script` (this will automatically save the file in the folder you see)

------------------------------------------------------------------------

# Quarto Markdown documents (.qmd)

A Quarto Markdown document like this one (`intRo1 basics.qmd`) is mainly composed of two things:

-   **Text**, which is the main component. This can be formatted *as if it's a text editor* using Markdown syntax; for example, if a line starts with a hash symbol, `#`, it will become a heading.
-   **Chunks**, which contain code (and comments, which are preceded by a hash symbol, `#`). A chunk looks like this:

```{r}
# This section is a chunk, that contains code.
print(R.version.string)
```

To **run all the code in a chunk**, you click on the green triangle button at the top right of the chunk (or you place your cursor inside it and press on Windows `Ctrl` + `Shift` + `Enter`; on Mac: `⌘` + `⌥` + `Enter`.

*Exercise 2.* Run this chunk. Note where is the output displayed.

```{r}
5 - 1
```

To **run a single line**, you can click on it and press `Ctrl` + `Enter`, on Mac, `⌘` + `Enter`.

To **run any part of the code** (like two lines), you can select the code of interest and press the key combinations as above.

*Exercise 3.* Only run the line of this chunk that calculates the area of a circle - not the whole chunk.

```{r}
strsplit("erom ecno yrt - knuhc elohw eht nur ev'uoy snaem ti siht ees uoy fi", NULL) |> 
  unlist() |> rev() |> paste(collapse = "")

# Area of a circle
pi * 1.4 ^2
```

To add a new chunk, you can:

-   Go to the toolbar, click `Code` → `Insert Chunk`.
-   Go to the top right of the window, click on an icon with a green `+c` → `R`
-   Use a keyboard shortcut
    -   Mac:`⌘` + `⌥` + `I`
    -   Windows, US keyboard: `Ctrl` + `Alt` + `I`
    -   Windows, any other keyboard: this needs resetting - go to the toolbar, `Tools` → `Modify Keyboard Shortcuts...` → type `insert chunk` in the `Filter` field → click on the shortcut area → press `Ctrl` + `Shift` + `I`.
-   You could potentially type the three backticks ```` ``` ```` followed by `{r}` and close the chunk with three more backticks, but why would you?

A Markdown document can be opened in Visual mode (like this one) or in Source mode. Visual mode will have nicer formatting of the text outside of the code chunks.

You can see the outline of the qmd file by clicking on the `Outline` button in the top right part of this panel.

You can create a new Markdown document, you can:

-   Go to the toolbar: `File` → `New File` → `Quarto document...` → set options → click `Create`
-   Go to the Files tab in the bottom right of the screen and click on the `New Blank File` icon → `Quarto doc...` (this will automatically save the file in the folder you see)

*Exercise 4.* Add a new chunk in the space below, and use it to divide 6 by 2.

------------------------------------------------------------------------

# Assignment

You can tell R that something has a name; R will remember it and you can use that later in your code. This is called *assignment* and is done by using the arrow `<-` (keyboard shortcut: `Alt` + `-` on Windows, `⌥` + `*` on Mac) Assignment creates a new "object". The following code means: "radius" gets the value of 5.7. "radius" is a new object.

*Exercise 5.* Run this chunk. In which part of the screen is R storing this value?

```{r}
# "radius" gets the value of 5.7
radius <- 5.7

# Visualising the value of "radius"
radius
```

From now, you can use the object "radius" in the rest of your code, and R will know what you mean.

*Exercise 6.* Calculate the double of the value assigned to radius, without typing 5.7.

```{r}

```

Note that assigning a new value to an existing object will permanently overwrite the old version.

```{r}
radius <- 18
radius
```

------------------------------------------------------------------------

# Using functions

In programming, a function is like a verb. It takes something (its "arguments"), it does something to it, and gives you back an output. In R, the arguments of a function are written in brackets.

The square root function, `sqrt()`, is very simple: it can take a single argument (a number) and it will return its square root.

```{r}
# Square root function
sqrt(64)
```

Many functions take more arguments. For example, `seq()`, used to generate regular sequences, needs values for these arguments: `from`, `to`, `by`.

```{r}
# Create a regular sequence of numbers from 1996 to 2040, by 4
seq(from = 1996, to = 2040, by = 4)
```

You can find information on a function by using `help()`; the documentation will be shown in the bottom right part of the screen.

```{r}
help(seq)
```

*Exercise 7.*

1.  Create a new chunk below.
2.  Use it to calculate the natural logarithm of 100.

------------------------------------------------------------------------

# Using packages

R has some core functions, like the ones we've used so far: `sqrt()`, `mean()` and `seq()` and several more advanced ones (for example, the function for logistic regression). There are also extra functions made by programmers and grouped into "packages", which need to be downloaded (and loaded) separately.

## Step 1: Download and install a package

To download and install a package, one uses the `install.packages()` function, adding the package name in quotes. This might take a bit of time if the packages are large.

```{r}
install.packages("readr")
```

You may also do this via the RStudio graphical interface: in the bottom right quarter of the screen, you click on `Packages` and then `Install`. You type the name of the package in the empty field and then click on the `Install` button.

You can check if a package is already installed by going to the `Packages` tab and searching for its name.

*Exercise 8.* Install package `ggplot2` with either method.

## Step 2: Load the package

You can then load (open) the package with `library()` so that you can use its functions.

```{r}
library(readr)
```

You only need to install packages once, but you then need to open it every time you want to use some of its functions.

------------------------------------------------------------------------

# Using tables of data

A large part of R is built around `data.frame`s: data in table format.

For example, let's explore a small table of patient-level data on bacteraemias. For the moment, run this code without focussing on the `read_csv` function - we'll cover it in session `03_import`.

To have a look at this dataset, you can:

-   Option 1: "call" its name. As you're in a qmd document, the table will be displayed immediately under the chunk. You can use the arrows and the numbers to show more columns and more rows.
-   Option 2: use function `View()` (caution: R is case-sensitive) or click on its name in the Environment tab. This will open a new tab.

```{r}
# Import the table of bacteraemias
bacteraemias <- read_csv("data/raw/bacteraemias.csv")

# Option 1: dataframe name
bacteraemias
```

```{r}
# Option 2: using View().
# NB - this will open a new tab
View(bacteraemias)
```

A `data.frame` should have one observation per row and one variable per column.

## Using functions on a dataset column

Now let's use the `mean()` and `sd()` functions to calculate the average age and its standard deviation.

Unlike Stata, R can keep more than one dataset in memory at the same time. For this reason, every time you refer to a column, you also need to tell R which `data.frame` is that variable from. You do this by typing a `$` sign between the `data.frame` and the variable name. (The `$` sign is technically called the "exposition operator").

```{r}
# Calculate the mean of variable `len`, taken from data.frame `teeth`
mean(bacteraemias$age)

# Calculate its standard deviation
sd(bacteraemias$age)
```

*Exercise 9.* Let's use another dataset, `metabolic.csv`. This contains info on some patient factors and outcomes for metabolic disease.

1.  Preview the data.
2.  Calculate the `median` systolic blood pressure.
3.  Calculate the maximum hours of physical activity per week.
4.  Add comments to the chunk that explain what each line is doing.

```{r}
# Load the data
metabolic <- read_csv("data/raw/metabolic.csv")
```

------------------------------------------------------------------------

# Vectors

In R, a **vector** is a list of objects of the same type, in a specific order. For example, 5 2 4 is a vector (of numbers); "cirrhosis" "fibrosis" "hepatitis" is a vector (of characters).

Of note, every column in a `data.frame` is a vector!

You create a vector using function `c()`, which stands for "combine":

```{r}
c(5, 2, 4)

c("cirrhosis", "fibrosis", "hepatitis")
```

Vectors can be used:

-   When the argument of a function needs to contain more than one element
-   When we want to apply a function to more than one object.

```{r}
# A function that will summarise all elements of a vector
mean(c(6, 7, 8))

# A function that will apply to each element separately
log(c(100, 10))
```

Why do you think the output of the chunk above is different to the below?

```{r}
log(100, 10)
```

Objects in a vector can have names:

```{r}
c("age" = 19, "height" = 185, "systolic_BP" = 132)
```

------------------------------------------------------------------------

*Push exercise.*

1.  Preview the `aggregated_results.csv` dataset
2.  Calculate the mean count across all years
3.  Assign this to an object called `mean_count`.

```{r}
# Import
aggregated_results <- read_csv("data/raw/aggregated_results.csv")

# Preview

# Calculate mean count

# Assign the result to an object called `mean_count`

```

------------------------------------------------------------------------

# Learning more

-   R for Data Science (2e)
    -   [Workflow: basics](https://r4ds.hadley.nz/workflow-basics)
    -   [Workflow: scripts and projects](https://r4ds.hadley.nz/workflow-scripts)

------------------------------------------------------------------------

# Solutions

```{r}
# Exercise 6
2 * radius
```

```{r}
# Exercise 7
log(100)
```

```{r}
# Exercise 9

# Preview the data
metabolic

# Calculate median sBP
median(metabolic$blood_pressure_systolic)

# Calculate max activity
max(metabolic$physical_activity_hours_per_week)
```

```{r}
# Push exercise
# Preview
aggregated_results

# Calculate mean count
mean(aggregated_results$count)

# Assign the result to an object called `mean_count`
mean_count <- mean(aggregated_results$count)
```

------------------------------------------------------------------------
