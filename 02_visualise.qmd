---
title: "02: Visualising data"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

## What you will learn

-   Visualising data with `ggplot2`
    -   Bar charts
    -   Line charts
    -   Box plots
    -   Scatterplots
    -   Saving a plot

------------------------------------------------------------------------

## Recap from 01_basics

1.  Create a new R script or qmd and save it to file.
2.  Create a new object called `year` containing the value `2025`.
3.  Preview the `Theoph` data frame (no need to import it first, it's built into R) using a function of your choice.

------------------------------------------------------------------------

## Setup

Before you run the chunk below, ensure you have installed the `tidyverse` package. This includes `readr`, `ggplot2` and other packages that we will frequently use.

```{r}
library(tidyverse)
```

> *Want to know more?* Package conflicts.\
> Two packages can contain a function with the same name - for example, `filter()` is present in both the base R module `stats` and in `dplyr`. If you load `dplyr`, R will warn you that from now on, every time you call `filter()`, it will use its `dplyr` form. In the rare cases in which you want to force R to use the function from a specific package, you can preface the function with `packagename::`. For example, `stats::filter(...)` will tell R to specifically use the `filter()` function from `stats` (and not the one from `dplyr`).

Let's import some data - for now, please just run this chunk; we'll come back to how to do it in session `03_import`.

We'll use some antimicrobial resistance data adapted from the ESPAUR 2024 report.

```{r}
# Import data
amr_ethnicity <- read_csv("data/raw/amr_ethnicity.csv")
amr_klebsiella <- read_csv("data/raw/amr_klebsiella.csv")
amr_pseud_acinetobac <- read_csv("data/raw/pseud_acinetobac.csv")
```

*Exercise 1*. Which of these tables are line lists and which are aggregated data?

------------------------------------------------------------------------

## Data visualisation with `ggplot2`

Package `ggplot2` can make high-quality graphs.

It works in "layers" separated by `+` signs: you can have a very simple graph with just two layers, or a very complex one with many more. Let's start with something simple and work on it.

------------------------------------------------------------------------

## Bar charts

Bar charts are useful to visualise frequencies of a categorical variable. The function you use to make these depends on whether your data is in aggregated or individual-level data.

### From aggregated data

If your data is in aggregated format, you can make a bar chart using `geom_col()`. Here's how to make a basic version:

```{r}
# You start with the dataset and variable to plot
ggplot(amr_ethnicity, aes(x = ethn_group, y = perc_resist)) +
  # You then add the type of graph
  geom_col()
```

Let's break this code down.

-   `ggplot()` is the base function; it needs as arguments:
-   the data frame name (`amr_ethnicity`)
-   `aes()` stands for "aesthetics", and basically means what we want to appear on the graph. `x = ethn_group` means that we want variable `ethn_group` to be plotted on the x-axis. `y = perc_resist` means that we want those values to show on the y-axis.
-   `geom_col` is a geometry function: it specifies that we want the variables above to be represented in a bar chart.
-   The `+` sign links the base function with the geometry function.

Note that code can span over more than one line - it makes it more readable.

#### Bugs

Computers take your instructions very literally, so tiny mistakes can easily break some code.

*Exercise 2.*

1.  Remove the two `#` from this chunk.
2.  You will see that this chunk won't run properly.
3.  Can you spot the *four* bugs that break the code, and fix them?

```{r}
# ggplot(amr_ethnicity, aes(x = Ethn_group, y = perc resist)
#   geom_col()
```

(Hint: if you're accessing this qmd file in Source mode, RStudio will *sometimes* help with some of these bugs. Look to the left of the chunk. Sometimes the advice can actually be misleading, so take with a pinch of salt).

### From individual-level data

If your data is not already aggregated, you need to use `geom_bar()` instead. This will count the number of rows in each group.

```{r}
ggplot(amr_klebsiella, aes(x = susceptibility_result)) +
    geom_bar()
```

### Colour as decoration

We can build on these simple graphs by adding some optional arguments.

For example, let's change the fill colour from the default gray.

```{r}
ggplot(amr_klebsiella, aes(x = susceptibility_result)) +
    geom_bar(fill = "darkgreen")
```

*Exercise 3.*

1.  Visualise the summarised age of the different ethnic groups in the `amr_ethnicity` data with a bar chart.
2.  Colour all the bars with a single colour of your choice.

```{r}

```

*Want to know more?* Reordering bars is covered in session `08_clean`.

### Clustered bar charts

However colour can also be use to convey information - for example, to stratify a plot by another categorical variable.

To do this, we add `fill` to the `aes()` function, rather than keeping it outside of it, and we link it to a variable name, rather than to a specific colour. This will also add a legend.

Best practice is:

-   to use clustered bar charts rather than stacked bar charts. You make a clustered bar chart by adding `position = position_dodge()` to the `geom_col()` or `geom_bar()`.
-   *not* to use more than 4 colours as they become difficult to make accessible. If you have 5 or more categories, consider using facets instead (see below).
-   *not* to use this when you're visualising a time series, like years on the x-axis. You should use a line chart instead.

```{r}
ggplot(amr_pseud_acinetobac, aes(x = organism, y = perc_resistant, fill = antimicrobial)) +
  geom_col(position = position_dodge(0.8), width = 0.7)
```

*Exercise 4.*

1.  Create a bar chart that shows the same data, but with antimicrobials on the x-axis and colours indicating organism.
2.  Which of the two visualisations do you find more helpful?

```{r}

```

*Want to know more?*

-   To italicise part of some text, I invite you to look into `ggtext::element_markdown()`.
-   To change the *value* labels in a categorical variable, you either use `+ scale_<aes>_discrete(labels = c("value1" = "label1", "value2" = "label2"))`, or you recode the values before plotting. I recommend you ignore this for now.

------------------------------------------------------------------------

### Labels

Now let's add a plot title and rename the axes.

You do this by adding another `+` sign and then the `labs()` function - which can include a `title =`, `x =`, and many other arguments.

```{r}
ggplot(amr_pseud_acinetobac, aes(y = organism, x = perc_resistant, fill = antimicrobial)) +
  geom_col(position = position_dodge(0.8), width = 0.7) +
  labs(title = "Antibiotic resistance in Acinetobacter and Pseudomonas",
       y = "Organism",
       x = "Percentage of isolates that are resistant")
```

*Exercise 5.*

Update the code to make the graph above to: 1. Show a subtitle (England, 2023) 2. Show a caption with the data source (ESPAUR report 2024) 3. Change the label title from "antimicrobial" to "Antibiotic".

```{r}

```

------------------------------------------------------------------------

## Line charts for time series

We often use line charts to show time series data: time is on the x-axis and a numerical variable on the y-axis. Line charts are made using `geom_line()`.

### Single line

The simplest line chart has a single line, and is equivalent to a bar chart.

I recommend you have your time variable in a numerical data class - such as integers, dates, `zoo::yearmon`, `zoo::yearqtr`, rather than in character or factor format (like "2021/22", or "Apr-Jun 2024" for example). This makes plotting easier, especially when deciding which labels to show.

```{r}
amr_tb <- read_csv("data/raw/amr_tb.csv")
```

```{r}
# An equivalent bar chart
amr_tb |>
    ggplot(aes(year, resistant_count)) +
    geom_col()
```

*Exercise 6*.

1.  Create a line chart equivalent to the bar chart above.
2.  Do you notice any other difference?

```{r}

```

*Want to know more?* If you want your y-axis to start from 0 in a line chart, you can add a new layer: `coord_cartesian(ylim = 0, NA))`.

### 2 to 4 lines

If you want to compare your `y` in 2 to 4 groups, you can use the `colour` argument in the `aes()` function.

```{r}
rates_bacteraemia_grampos <- read_csv("data/raw/rates_bacteraemia_grampos.csv")
rates_bacteraemia_all <- read_csv("data/raw/rates_bacteraemia_all.csv")
```

```{r}
rates_bacteraemia_grampos |> 
    ggplot(aes(year, rate, colour = organism)) +
    geom_line()
```

*Want to learn more?*

-   Ideally, you wouldn't rely on colour alone to differentiate lines. It is preferable to label the lines directly, for example with `ggrepel::geom_label_repel()` - a bit fiddly.

### 5 or more lines

If you have 5 or more groups to compare, they become difficult to distinguish - you risk making a spaghetti plot. Instead, you can split the chart into small multiple plots, using `facet_wrap()` or `facet_grid()`.

```{r}
# Not accessible
rates_bacteraemia_all |>
    ggplot(aes(year, rate, colour = organism)) +
    geom_line()

rates_bacteraemia_all |>
    ggplot(aes(year, rate)) +
    facet_wrap(~organism) +
    geom_line()
```

*Want to learn more?*

-   If your aim is showing the time trend in each facet, you can set the y-axis scales to be independent of each other, with `facet_wrap(~organism, scales = "free_y"`. That will zoom in.
-   If you aim is comparing lines, you can show all other lines in a lighter shade to each small plot using the `gghighlight` package.

## Scatterplots

You can plot two continuous variables against each other in a scatterplot, for example `age` and creatinine clearance (`CrCl`, a measure of kidney function).

The function is `geom_point()`; a basic scatterplot is made this way:

```{r}
ggplot(amr_klebsiella, aes(x = age, y = CrCl)) +
  geom_point()
```

We can also stratify by a categorical variable thanks to the `colour` aesthetic.

```{r}
ggplot(amr_klebsiella, aes(x = age, y = CrCl, colour = sex)) +
  geom_point()
```

*Exercise 7.*

Show the two sexes with different *shapes* as well as different colours.

```{r}

```

### More customisation

`ggplot2` allows you to customise your graphs to a great extent.

Run this chunk and then try to understand what each line does.

*Tip*: you can reverse engineer what a line does by deleting it and see what happens to the output, or by looking up the function's documentation.

```{r}
ggplot(amr_klebsiella, aes(x = age, y = CrCl)) +
    # Highlight chronic kidney disease stage 3-5
    annotate("rect", ymin = 0, ymax = 60, xmin = 0, xmax = 150, fill = "red", alpha = 0.1) +
    annotate("text", x  = 50, y = 40, label = "CKD 3-5") +
    geom_point(
        aes(colour = sex, shape = sex),
        alpha = 0.5
        ) +
    geom_smooth(
        method = "lm",
        linetype = "dashed"
        ) +
    coord_cartesian(xlim = c(18, 100)) +
    # Show the CrCl thresholds for the various stages of CKD
    scale_y_continuous(breaks = c(0, 15, seq(30, 160, by = 30))) +
    scale_x_continuous(breaks = c(18, seq(40, 100, by = 20))) +
    scale_colour_brewer(palette  = "Dark2") +
    labs(
        title = "Relationship between age and creatinine clearance",
        subtitle = "Klebsiella spp. bacteraemia, England, 2023",
        x = "Age (years)",
        y = "Creatinine\nclearace\n(mL/min)",
        colour = "Sex",
        shape = "Sex",
        caption = "Data: simulated. The blue dashed line is fitted  using linear regression."
        )
```

## Themes

The `theme_...()` functions allow you to customise the appearance of a ggplot. If you want some changes to apply to all graphs you'll produce in this session, you can use `theme_set()` and `theme_update()`. I recommend adding this code to the top of your script that produces graphs.

```{r}
# Set theme_bw() as the start point but increase the starting character size to 12 points
theme_set(theme_bw(base_size = 12))
theme_update(
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(colour = "black"),
    axis.title.y = element_text(
        angle = 0,
        hjust = 0
        ),
    axis.title = element_text(face = "bold"),
    strip.background = element_blank(),
    strip.text = element_text(size = 11),
    panel.spacing = unit(1, "lines"),
    axis.text = element_text(size = 11),
    legend.title = element_blank(),
    legend.text = element_text(size = 11)
    )
```

*Exercise* 8. Rerun the chunk that produces the creatinine clearance graph and notice the differences.

------------------------------------------------------------------------

## Saving a plot to file

You can save a plot to file with function `ggsave()`. You need to specify the name of the file and its extension.

By default, it will save:

-   the last plot you've generated
-   into the current directory; if you're running code from a qmd, this will be the same directory as the .qmd file). However, I recommend you save all your graphs in an output folder.

```{r}
ggsave("output/scatterplot_age_crcl.png")
```

You can save to pdf, jpeg, png, svg, and other formats, and you can change height and width.

Please refer to the function's documentation for more options.

*Exercise 8.* Save this same plot to file, but:

1.  Give it a different name
2.  Use jpeg format
3.  Set the size to 1200×500 pixels
4.  Set the resolution to 150 dpi.

```{r}

```

------------------------------------------------------------------------

## Box plots

Box plots are helpful to compactly display the distribution of a continuous variable. The ggplot2 function is `geom_boxplot()`.

In its simplest form, you have a single Box plot. This is equivalent to a histogram. For example, we can display the age distribution in this line list:

```{r}
ggplot(amr_klebsiella, aes(age)) +
  geom_boxplot()

ggplot(amr_klebsiella, aes(age)) +
  geom_histogram()
```

*Want to know more?* To check what the lines and dots represent, please run `help(geom_boxplot)` and read the section "Summary statistics".

### Stratified Box plots

However, Box plots are more helpful to compare the distribution of a continuous variable across different groups.

For example, we can show how the age distribution differs according to sex.

```{r}
ggplot(amr_klebsiella, aes(x = age, y = sex)) +
  geom_boxplot()
```

*Want to know more?* Box plots hide the number of observations as well as any irregular distributions. I invite you to look into `ggbeeswarm::geom_beeswarm()` as an alternative (or an adjunct).

------------------------------------------------------------------------

## Learning more

I recommend these resources for `ggplot2` and data visualisation:

-   R for Data Science (2e)
    -   (Basics) [Data visualisation](https://r4ds.hadley.nz/data-visualize.html)
    -   (Intermediate) [Layers](https://r4ds.hadley.nz/layers)
    -   (Intermediate) [Communication](https://r4ds.hadley.nz/communication)
-   (Intermediate) The BBC [Visual and Data Journalism cookbook](https://bbc.github.io/rcookbook/) for R graphics
-   (Advanced) [Data Visualisation with R](https://rkabacoff.github.io/datavis/), by Rob Kabacoff
-   RStudio [Data Visualisation Cheat Sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)
-   [From Data to Viz](https://www.data-to-viz.com/) - how to choose which graph to use according to the type of data you have
-   [Color Brewer](https://colorbrewer2.org/) - picking a colour palette according to data type and accessibility requirements

------------------------------------------------------------------------

## Solutions

```{r}
#| label: ex1 solution

# amr_klebsiella is the only line list; the others are aggregated.
```

```{r}
#| label: ex2 tips

# Just some tips: look at case, spaces, and symbols
```

```{r}
#| label: ex3 solution

ggplot(amr_ethnicity, aes(y = ethn_group, x = median_age)) +
  geom_col(fill = "#007C91")
```

```{r}
#| label: ex4 solution

ggplot(amr_pseud_acinetobac, aes(y = antimicrobial, x = perc_resistant, fill = organism)) +
  geom_col(position = position_dodge(0.8), width = 0.7)
```

```{r}
#| label: ex5 solution

ggplot(amr_pseud_acinetobac, aes(y = organism, x = perc_resistant, fill = antimicrobial)) +
  geom_col(position = position_dodge(0.8), width = 0.7) +
  labs(title = "Antibiotic resistance in Acinetobacter and Pseudomonas",
       subtitle = "England, 2023",
       y = "Organism",
       x = "Percentage of isolates that are resistant",
       fill = "Antibiotic",
       caption = "Data source: ESPAUR report 2024")
```

```{r}
#| label: ex6 solution

# Q1
amr_tb |>
    ggplot(aes(year, resistant_count)) +
    geom_line()

# Q2
# The y-axis has been cut in order to zoom into the data.
```

```{r}
#| label: ex7 solution

ggplot(amr_klebsiella, aes(x = age, y = CrCl, shape = sex, colour = sex)) +
  geom_point()
```

```{r}
#| label: ex8 solution

ggsave(
    # Q1, Q2
    "output/scatter_creat_clearance.jpeg",
    # Q3
    width = 1200,
    height = 500,
    unit = "px",
    # Q4
    dpi = 150
    )
```

------------------------------------------------------------------------
