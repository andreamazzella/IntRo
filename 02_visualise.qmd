---
title: "2: Data visualisation"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

# What you will learn

-   Exploring a `data.frame`
-   Visualising data with `ggplot2`
    -   Bar charts
    -   Box plots
    -   Scatterplots
    -   Saving a plot

------------------------------------------------------------------------

Before you run the chunk below, ensure you have installed the `tidyverse` package. This includes `readr`, `ggplot2` and other packages that we will frequently use.

```{r}
library(tidyverse)
```

# Recap from 01_basics

1.  Calculate the minimum white blood cell count in the dataframe `bacteraemias`.

```{r}
bacteraemias <- read_csv("./data/bacteraemias.csv")

# Your code goes here ↓

```

2.  Create a chunk in the space below.
3.  In the newly created chunk, create a new object called `min_white` that contains this value.

------------------------------------------------------------------------

# Exploring a data frame

For this topic, we will use a sample dataset called `msleep`.

It contains data on sleep for 83 different mammal species.

```{r}
# Import data
msleep <- ggplot2::msleep

# Preview of dataset
msleep

head(msleep)

# RStudio Viewer
View(msleep)

# Structure
glimpse(msleep)
```

------------------------------------------------------------------------

# Data visualisation with `ggplot2`

Package `ggplot2` can make high-quality graphs.

It works in "layers" separated by `+` signs: you can have a very simple graph with just two layers, or a very complex one with many more. Let's start with something simple and work on it.

------------------------------------------------------------------------

## Bar charts

Bar charts are useful to visualise frequencies of a categorical variable, such as diet type (`vore`) in our dataset.

They are made by using `geom_bar()`. This is how to make a basic bar chart in `ggplot2`:

```{r}
# You start with the dataset and variable to plot
ggplot(msleep, aes(x = vore)) +
  # You then add the type of graph
  geom_bar()
```

Let's break this code down.

-   `ggplot()` is the base function; it needs as arguments:
-   the dataset name (`msleep`)
-   `aes()` stands for "aesthetics", and basically means what we want to appear on the graph. `x = vore` means that we want variable `vore` to be plotted on the x-axis.
-   `geom_bar` is a geometry function: it specifies that we want the variable above to be represented in a bar chart.
-   The `+` sign links the base function with the geometry function.

Note that code can span over more than one line - it makes it more readable.

### Bugs

Computers take your instructions very literally, so tiny mistakes can easily break some code.

*Exercise 2.*

1.  Remove the two `#` from this chunk.
2.  You will see that this chunk won't run properly.
3.  Can you spot the *three* bugs that break the code, and fix them?

```{r}
# ggplot(msleep, aes(x = Vore)
#   geom_bar()
```

(Hint: if you're accessing this qmd file in Source mode, RStudio will *sometimes* help with some of these bugs. Look tothe left of the chunk. Sometimes the advice can actually be misleading, so take with a pinch of salt).

*Exercise 3.*

Visualise the conservation status of the mammals in this dataset with a bar chart.

Hint: you can run the dataset name if you don't know what the variables are called.

```{r}

```

### Colour as decoration

We can build on these simple graphs by adding some optional arguments.

For example, let's change the fill colour from the default gray.

```{r}
ggplot(msleep, aes(x = vore)) +
  geom_bar(fill = "darkgreen")
```

### Colour that conveys information

However colour can also be use to convey information - for example, to stratify a plot by a categorical variable.

To do this, we add `fill` to the `aes()` function, rather than keeping it outside of it, and we link it to a variable name, rather than to a specific colour. This will also add a legend.

```{r}
ggplot(msleep, aes(x = vore, fill = conservation)) +
  geom_bar()
```

*Exercise 4.* Now create a bar chart that shows counts of different conservation groups. Then, stratify by diet type.

```{r}

```

*Want to know more?* To change the *value* labels in a categorical variable, you either use `+ scale_<aes>_discrete(labels = c("value1" = "label1", "value2" = "label2"))`, or you recode the values before plotting. I recommend you ignore this for now.

------------------------------------------------------------------------

## Line charts

```{r}
library(tidyverse)
dat <- tribble(
    ~sex, ~year, ~rate_bacteraemia,
    "female", 2025, 13,
    "female", 2026, 15,
    "female", 2027, 14,
    "female", 2028, 13,
    "female", 2029, 13,
    "female", 2030, 14,
    "male", 2025, 21,
    "male", 2026, 24,
    "male", 2027, 26,
    "male", 2028, 25,
    "male", 2029, 26,
    "male", 2030, 24)

dat |>
    ggplot(aes(x = year, y = rate_bacteraemia, colour = sex)) +
    geom_line() +
    coord_cartesian(ylim = c(0, NA))
```

## Box plots

Box plots are helpful to compactly display the distribution of a continuous variable. The ggplot2 function is `geom_boxplot()`.

In its simplest form, you have a single Box plot. For example, we can display the distribution of hours of sleep (regardless of animal type):

```{r}
ggplot(msleep, aes(y = sleep_total)) +
  geom_boxplot()
```

A Box plot shows:

1.  The thick *central line* indicates the *median*
2.  The *lower and upper hinges* indicate the *25th and 75th percentile* respectively - so the distance between them is the interquartile range (IQR)
3.  The *upper whisker*: extends to the largest value no further than *1.5×IQR* from the hinge

If there are any data points that are beyond the whiskers, they will be individually displayed as *dots*.

### Stratified Box plots

However, Box plots are more helpful to compare the distribution of a continuous variable across different groups.

For example, we can show how animals of different eating behaviours differ in terms of sleeping duration.

```{r}
ggplot(msleep, aes(x = vore, y = sleep_total)) +
  geom_boxplot()
```

### Labels

Now let's add a plot title and rename the axes.

You do this by adding another `+` sign and then the `labs()` function - which can include a `title =`, `x =`, and many other arguments.

```{r}
ggplot(msleep, aes(x = vore, y = sleep_total)) +
  geom_boxplot() +
  labs(title = "Eating behaviour and sleep across 83 mammal species",
       x = "Eating behaviour",
       y = "Sleep duration (h)")
```

*Exercise 5.*

-   Make a new Box plot of a continuous variable of your choice.
-   Stratify it by a categorical variable of your choice.
-   Rename the axes appropriately.
-   Add a title.

Hint: do it layer by layer, so that if it doesn't work, you can try and fix it more easily, before making it very complex.

```{r}
# Dataframe and variables

# Graph type

# Labels

```

------------------------------------------------------------------------

## Scatterplots

You can plot two continuous variables against each other in a scatterplot. The function is `geom_point()`; a basic scatterplot is made this way:

```{r}
ggplot(msleep, aes(x = sleep_total, y = sleep_rem)) +
  geom_point()
```

*Exercise 6.*

Add a title and rename the axes on the scatterplot above.

```{r}

```

We can also stratify by a categorical variable thanks to the `colour` aesthetic.

```{r}
ggplot(msleep, aes(x = sleep_total, y = sleep_rem)) +
  geom_point(aes(colour = vore))
```

*Exercise 7.*

Show different diet types (`vore`) with different *shapes*, rather than different colours.

```{r}

```

### More customisation

`ggplot2` allows you to customise your graphs to a great extent.

Run this chunk and then try to understand what each line does.

```{r}
ggplot(msleep, aes(x = sleep_total, y = sleep_rem)) +
  geom_smooth(method = "lm", colour = "darkgrey", linetype = "dashed") +
  geom_point(aes(shape = vore, colour = conservation)) +
  coord_cartesian(xlim = c(0, 20)) +
  labs(title = "Relationship between total and REM sleep duration",
       subtitle = "Among 83 mammal species",
       x = "Daily hours of sleep",
       y = "Daily hours of REM sleep",
       colour = "Conservation\nstatus",
       shape = "Eating behaviour",
       caption = "Data: Savage & West 2007, 'A quantitative, theoretical framework for understanding mammalian sleep'"
       ) +
  theme_bw() +
  scale_colour_brewer(palette  = "Dark2")
```

------------------------------------------------------------------------

## Saving a plot

You can save a plot with function `ggsave()`. You need to specify the name of the file and its extension.

By default, it will save:

-   the last plot you've generated
-   into the current directory (i.e. the same directory as this .Rmd file)

```{r}
ggsave("REM_mammals_scatterplot.png")
```

You can save to pdf, jpeg, png, svg, and other formats, and you can change height and width.

See `help(ggsave)` for more options.

*Exercise 8.*

Save a plot of your choice in pdf format.

```{r}

```

------------------------------------------------------------------------

## Learning more

I recommend these resources for `ggplot2` and data visualisation:

-   R for Data Science (2e)
    -   (Basics) [Data visualisation](https://r4ds.hadley.nz/data-visualize.html)
    -   (Intermediate) [Layers](https://r4ds.hadley.nz/layers)
    -   (Intermediate) [Communication](https://r4ds.hadley.nz/communication)
-   (Intermediate) The BBC [Visual and Data Journalism cookbook](https://bbc.github.io/rcookbook/) for R graphics
-   (Advanced) [Data Visualisation with R](https://rkabacoff.github.io/datavis/), by Rob Kabacoff
-   RStudio [Data Visualisation Cheat Sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)
-   [From Data to Viz](https://www.data-to-viz.com/) - how to choose which graph to use according to the type of data you have
-   [Color Brewer](https://colorbrewer2.org/) - picking a colour palette according to data type and accessibility requirements

------------------------------------------------------------------------

## Solutions

```{r}
# Recap exercise
# You can check if you have a package installed by going to the Packages panel (bottom right of the screen)
# You can install a package by clicking on the Install button (in that panel)
min(bacteraemias$wbc)
min_white <- min(bacteraemias$wbc)

# Exercise 2
ggplot(msleep, aes(x = vore)) +
   geom_bar()

# Exercise 3
ggplot(msleep, aes(x = conservation)) +
   geom_bar()

# Exercise 4
ggplot(msleep, aes(x = conservation, fill = vore)) +
  geom_bar() 
```

------------------------------------------------------------------------
