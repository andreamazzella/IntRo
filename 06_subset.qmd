---
title: "06: Subsetting data"
subtitle: "Introduction to R for health data"
author: Andrea Mazzella [(GitHub)](https://github.com/andreamazzella)
editor: visual
---

------------------------------------------------------------------------

## Content

-   Sorting rows
-   Filtering rows
-   Selecting columns
-   Conditions
-   Piping function calls together

------------------------------------------------------------------------

## Recap from topic 05_classes

1.  Create a vector with the following values: 1.2 9.3 0.6
2.  Create a data frame with the following columns: id (1, 2, 3, 4, 5), initials (BN, NX, ED, ST, VN).

------------------------------------------------------------------------

### Load packages

In this session, you'll use functions from [`dplyr`](https://dplyr.tidyverse.org/reference/index.html), part of the core tidyverse. We used its `summarise()` and `count()` functons in session 04_summarise; now we'll use `arrange()`, `filter()`, `select()` and the `slice_` functions.

```{r}
#| label: setup

library(tidyverse)
```

> *Want to know more?*
>
> When you're using a qmd, if you use label a chunk with the word "setup", it will automatically run first whenever you try and run any other code in the qmd.

------------------------------------------------------------------------

We'll use the in-built dataset `msleep` containing information on sleep of 83 mammal species.

```{r}
msleep <- ggplot2::msleep
msleep
```

------------------------------------------------------------------------

### Sort rows

You can use `arrange()` to change the order of the rows according to the value of one or more columns.

By default, it uses ascending order for numbers. Rows with missing values are always listed at the end. If you list more than one column, each additional column will be used to break ties.

```{r}
msleep |>
  arrange(brainwt)
```

You can use `desc()` inside of `arrange()` to use descending order.

```{r}
msleep |>
  arrange(desc(sleep_total))
```

#### Exercise 1

Reorder the rows so that the animals are listed by taxonomic `order`. If there are multiple animals in the same order, list them by `genus`.

```{r}

```

------------------------------------------------------------------------

### Filter rows

Sometimes you don't need to use all the records (rows) in your dataset, but only a group of those: for example, you might want to plot sleep duration only among herbivores.

The function `filter()` lets you do just that: it filters your dataset according to a condition. Its first argument is the data frame name, just like function `ggplot()` and `summarise()`. Its second argument is a condition.

```{r}
# Only keep herbivores
msleep |>
  filter(vore == "herbi")
# note that it's a double = sign!
```

Note that now there are only 32 rows (down from 83) because all non-herbivores were excluded.

This is a temporary change. `msleep` stayed the same:

```{r}
msleep
```

If you want to keep a copy of a filtered dataset, you need to assign it a name.

```{r}
msleep_herbi <- msleep |>
  filter(vore == "herbi")
```

Remember that when you assign a value, R does not show you any result. If you want to see the output, you need to ask R to do it, for example in this case by calling `msleep_herbi`.

#### Exercise 2

Use `filter()` to identify which animals sleeps on average 4 hours per night.

```{r}

```

#### Conditions

You can use these conditions:

-   `>`, `>=`, `<`, `<=`
-   `==` (equal to; please note that this has two `=` signs!)
-   `!=` (not equal to)
-   `is.na(x)` - is this a missing value?
-   `!is.na(x)` - is this a non-missing value?

For example, we can use `is.na()` to only keep observation with missing sleep cycle data:

```{r}
msleep |>
  filter(is.na(sleep_cycle))
```

To remove rows with missing data in a given variable, you can also use `drop_na(x)` (from package `tidyr`) as shorthand:

```{r}
msleep |>
  drop_na(conservation)

# Is equivalent to
msleep |>
  filter(!is.na(conservation))
```

#### Linking conditions

You can also filter on more than one condition; for example, you might want to only filter herbivores that sleep more than 15 hours a day.

```{r}
msleep |>
  filter(vore == "herbi" & sleep_total > 15)
```

You can also link two or more conditions.

-   `&`: and. The overall condition will be TRUE only if both conditions are TRUE.
-   `|`: or. The overall condition will be TRUE if either condition is TRUE.
-   `x %in% c(3, 7)`: this is shorthand for `x == 3 | x == 7`.

##### Exercise 3

Filter *domesticated* mammals that *weigh more than 50 kg*. Which are they?

```{r}

```

##### Exercise 4

Make a bar chart of diet type, but only for mammals *whose brain weighs less than 50 grams*.

```{r}

```

### Extract rows by group

Imagine you want to only keep one row in each group; for example, only the carnivore, omnivore and herbivore with the longest total sleep duration. We can use the `slice_` functions with a `by =` argument for that.

```{r}
msleep |>
  slice_max(
    sleep_total,
    by = vore
    )
```

------------------------------------------------------------------------

### Select columns

Function `select()` keeps only certain variables (columns), and removes the rest. The first argument is (again) the dataset name. All the other arguments are the names of the variables we want to keep. (We briefly used this in topic 3 to choose variables to add to a table 1).

Imagine we wanted a dataset containing only information about mammal `name` and `order`:

```{r}
msleep |>
  select(name, order)
```

We can add as many variables as we need.

##### Exercise 5

Show a dataset only containing names, brain weights and body weights for all mammals.

```{r}

```

#### Selection helpers

There are a number of functions to help us select more efficiently; for example, `starts_with()`:

```{r}
msleep |>
  select(name, starts_with("sleep"))
```

Other helper functions are:

-   `ends_with()`
-   `contains()`
-   `where()`

```{r}
msleep |>
  select(name, where(is.numeric))
```

To avoid having to write down many columns, you can select all sequential columns using `:`

```{r}
msleep |>
  select(name:sleep_total)
```

------------------------------------------------------------------------

### Piping function calls together

Because `dplyr` functions take a data frame as the first argument and return a data frame, you can pipe them into other functions that take a data frame as a first argument.

For example, you can take a dataset, select only the columns you need, filter it, and then summarise it.

```{r}
msleep |>
  select(name, order, vore, bodywt) |> 
  filter(order %in% c("Carnivora", "Artiodactyla", "Rodentia")) |>
  summarise(
    n(),
    mean(bodywt),
    .by = order
    )
```

Using the `|>` pipes has the advantage of making the code easier to read for humans.

Compare with the alternatives:

```{r}
# Nesting functions
summarise(
  filter(
    select(msleep, name, order, vore, bodywt),
    order %in% c("Carnivora", "Artiodactyla", "Rodentia")
    ),
  n(),
  mean(bodywt),
  .by = order
  )
```

```{r}
# Creating intermediate objects
msleep_essential_cols <- select(msleep, name, order, vore, bodywt)
msleep_relevant_orders <- filter(msleep_essential_cols, order %in% c("Carnivora", "Artiodactyla", "Rodentia"))
summarise(
  msleep_relevant_orders,
  n(),
  mean(bodywt),
  .by = order
  )
```

Another good use case for pipelines is modifying a data frame before feeding it to `ggplot()`:.

```{r}
# Plotting REM sleep for herbivores only
msleep |> 
  filter(vore == "herbi") |>
  ggplot(aes(sleep_rem, name)) +
  geom_col(fill = "#7CAE00")
```

------------------------------------------------------------------------

##### Exercise 6

Create a new dataset called `sleepy` containing only data on name and total sleep - just for **insecti**`vore`s who sleep at least 9 hours per day - and in descending order of total sleep.

```{r}

```

------------------------------------------------------------------------

## Learning more

-   R for Data Science (2ed) chapter 3: [Data transformation](https://r4ds.hadley.nz/data-transform.html)

------------------------------------------------------------------------

## Solutions

```{r}
#| label: Exercise 1 solution
msleep |>
  arrange(order, genus)
```

```{r}
#| label: Exercise 2 solution
msleep |>
  filter(sleep_total == 4)
```

```{r}
#| label: Exercise 3 solution
msleep |>
  filter(conservation == "domesticated" & bodywt > 50)
```

```{r}
#| label: Exercise 4 solution

msleep |>
  filter(brainwt < 50/1000) |>
  ggplot(aes(vore)) +
  geom_bar()
```

```{r}
#| label: Exercise 5 solution
msleep |> 
  select(name, brainwt, bodywt)
```

```{r}
#| label: Exercise 6 solution
sleepy <- msleep |>
  filter(vore == "insecti" & sleep_total >= 13) |>
  select(name, sleep_total) |> 
  arrange(desc(sleep_total))

sleepy
```

------------------------------------------------------------------------
